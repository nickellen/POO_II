import java.util.Scanner;

Scanner input = new Scanner(System.in);

        while (true){

          System.out.println("Informe a opcao:\n1 - Imprimir atributos\n2 - Imprimir os métodos\n3 - Encerrar");
          int resultado = input.nextInt();

          if (resultado == 1){
            System.out.println("Informe o nome da classe: ");
            String classe = input.next();
            System.out.println();
            imprimeAtributos(classe);
          }
          else if (resultado == 2){
            System.out.println("Informe o nome da classe: ");
            String classe = input.next();
            imprimeMetodos(classe);
          }
          else{
            break;
          }
        }
        input.close();






import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class InspecionarClasse {

    public static void main(String[] args) throws Exception {

        Object[] argsPessoa = {"Adelaide", 17,01,1978,'F'};
        Pessoa professor = (Pessoa) instanciarClasse("Pessoa",  argsPessoa);

        Object[] argsEstudante = {"Paulo", 23,10,2015,'M', 20231487,2};
        Estudante estudante = (Estudante) instanciarClasse("Estudante",  argsEstudante);


        Object[] argsDisciplina = {"Artes", professor};
        Disciplina disciplina = (Disciplina) instanciarClasse("Disciplina",  argsDisciplina);
        System.out.println(disciplina + "\n");

        imprimeAtributos("Pessoa");
        imprimeMetodos("Estudante");
        imprimeConstrutores("Disciplina");
        imprimeHeranca("Estudante");

        Estudante[] arg = {estudante};
        executarMetodos(disciplina, "Disciplina", "adicionarAluno", arg);
        executarMetodos(disciplina, "Disciplina", "imprimirAlunos");
        
    }

    // instanciar uma classe por meio de um construtor com parâmetros.
    public static Object instanciarClasse(String classe, Object[] lista) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
        
        Class<?> x = Class.forName(classe);

        Constructor<?> constr = x.getDeclaredConstructors()[0];

        Object obj = (Object) constr.newInstance(lista);
        return obj;
    }

    // instanciar uma classe por meio de um construtor sem parâmetros.
    public static void instanciarClasse(String classe) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
        
        Class<?> x = Class.forName(classe);

        Constructor<?> constr = x.getDeclaredConstructors()[0];

        Pessoa pessoa1 = (Pessoa) constr.newInstance();
        System.out.print(pessoa1);
    }

    public static void imprimeHeranca(String classe) throws ClassNotFoundException{
        Class<?> x = Class.forName(classe);
        
        Class<?> heranca = x.getSuperclass();
        System.out.println(x.getName() + " herda: " + heranca);
    }

    // Imprime o nome, modificador, tipo do atributos da classe.
    public static void imprimeAtributos(String classe) throws ClassNotFoundException{

        Class<?> x = Class.forName(classe);

        Field[] atributos = x.getDeclaredFields();

        System.out.println("Atributos da classe " + x.getName() + ":\n");

        int i = 1;
        for (Field atributo: atributos){
           //System.out.println( "Atributo: " + atributo.getName());
            //System.out.println( "Modificador: " + Modifier.toString(atributo.getModifiers()));
            //System.out.println( "Tipo: " + atributo.getType() + "\n");
            System.out.println(i + " - " + atributo + "\n");
            i++;
        }
    }

    // Imprime o nome, modificador, tipo de retorno e tipos dos parâmetros dos métodos da classe.
    public static void imprimeMetodos(String classe) throws ClassNotFoundException{

        Class<?> x = Class.forName(classe);

        Method[] metodos = x.getDeclaredMethods();

        System.out.println("Metodos da classe " + x.getName() + ":\n");

        int i = 1;
        for  (Method metodo: metodos){

           // System.out.println( "Nome do metodo: " + metodo.getName());
            //System.out.println( "Modificador: " + Modifier.toString(metodo.getModifiers()));
           // System.out.println( "Tipo de retorno: " + metodo.getReturnType());

            //imprimeParamTypes(metodo.getParameterTypes(), metodo.getParameterCount());
            System.out.println(i + " - " + metodo + "\n");
            i++;
        }
    }

    // Imprime o modificador e tipos dos parâmetros dos construtores da classe.
    public static void imprimeConstrutores(String classe) throws ClassNotFoundException{

        Class<?> x = Class.forName(classe);

        Constructor<?>[] construtores = x.getDeclaredConstructors();

        System.out.println("Construtores da classe " + x.getName() + ":\n");
        int i = 1;
        for  (Constructor<?> construtor: construtores){

            System.out.println(i + " - " + construtor + "\n");
            i++;
        }
    }

    // executa um método de uma classe que possui n parâmetros.
    // param: ocorrência da classe, nome da classe, nome do método a ser executado e lista de param do método.
    public static void executarMetodos(Object obj, String classe, String nomeMetodo, Object[] listaArgs) throws Exception, ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{

        Class<?> x = Class.forName(classe);

        Method[] metodos = x.getMethods();

        Method m = encontrarMetodo(metodos, nomeMetodo);
        m.invoke(obj, listaArgs);
    }

    // executa um método de uma classe que não possui parâmetros.
    // param: ocorrência da classe, nome da classe e nome do método a ser executado.
    public static void executarMetodos(Object obj, String classe, String nomeMetodo) throws Exception, ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{

        Class<?> x = Class.forName(classe);

        Method[] metodos = x.getMethods();

        Method m = encontrarMetodo(metodos, nomeMetodo);
        m.invoke(obj);
    }

    // Verifica se o método preocurado está presente na classe.
    // param: lista de métodos da classe e nome do método preocurado.
    // return: metodo encontrado.
    public static Method encontrarMetodo(Method[] metodos, String nomeMetodo) throws Exception {
        for (Method metodo: metodos){
            if (metodo.getName().equals(nomeMetodo)){
                return metodo;
            }
        }
        throw new Exception("Método não encontrado");
    }

    // Imprime os tipos dos parâmetros de uma lista.
    public static void imprimeParamTypes(Class<?>[] paramTypes, int paramCount){

        if (paramCount > 0){
            System.out.print("Parametros: ");

            for  (Class<?> item: paramTypes){
                System.out.print(item + "  ");
            }
        }
    }
}